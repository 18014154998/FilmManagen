<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="Start.lpy.Mapper.GradeMapper" >
  <resultMap id="BaseResultMap" type="Start.lpy.pojo.Grade" >
    <id column="gid" property="gid" jdbcType="INTEGER" />
    <result column="grade_name" property="gradeName" jdbcType="CHAR" />
    <result column="grade_state" property="gradeState" jdbcType="INTEGER" />
    <result column="grade_createtime" property="gradeCreatetime" jdbcType="TIMESTAMP" />
    <result column="grade_destorytime" property="gradeDestorytime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    gid, grade_name, grade_state, grade_createtime, grade_destorytime
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="Start.lpy.pojo.GradeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from grade
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from grade
    where gid = #{gid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from grade
    where gid = #{gid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="Start.lpy.pojo.GradeExample" >
    delete from grade
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="Start.lpy.pojo.Grade" >
    insert into grade (gid, grade_name, grade_state, 
      grade_createtime, grade_destorytime)
    values (#{gid,jdbcType=INTEGER}, #{gradeName,jdbcType=CHAR}, #{gradeState,jdbcType=INTEGER}, 
      #{gradeCreatetime,jdbcType=TIMESTAMP}, #{gradeDestorytime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="Start.lpy.pojo.Grade" >
    insert into grade
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="gid != null" >
        gid,
      </if>
      <if test="gradeName != null" >
        grade_name,
      </if>
      <if test="gradeState != null" >
        grade_state,
      </if>
      <if test="gradeCreatetime != null" >
        grade_createtime,
      </if>
      <if test="gradeDestorytime != null" >
        grade_destorytime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="gid != null" >
        #{gid,jdbcType=INTEGER},
      </if>
      <if test="gradeName != null" >
        #{gradeName,jdbcType=CHAR},
      </if>
      <if test="gradeState != null" >
        #{gradeState,jdbcType=INTEGER},
      </if>
      <if test="gradeCreatetime != null" >
        #{gradeCreatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="gradeDestorytime != null" >
        #{gradeDestorytime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="Start.lpy.pojo.GradeExample" resultType="java.lang.Integer" >
    select count(*) from grade
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update grade
    <set >
      <if test="record.gid != null" >
        gid = #{record.gid,jdbcType=INTEGER},
      </if>
      <if test="record.gradeName != null" >
        grade_name = #{record.gradeName,jdbcType=CHAR},
      </if>
      <if test="record.gradeState != null" >
        grade_state = #{record.gradeState,jdbcType=INTEGER},
      </if>
      <if test="record.gradeCreatetime != null" >
        grade_createtime = #{record.gradeCreatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.gradeDestorytime != null" >
        grade_destorytime = #{record.gradeDestorytime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update grade
    set gid = #{record.gid,jdbcType=INTEGER},
      grade_name = #{record.gradeName,jdbcType=CHAR},
      grade_state = #{record.gradeState,jdbcType=INTEGER},
      grade_createtime = #{record.gradeCreatetime,jdbcType=TIMESTAMP},
      grade_destorytime = #{record.gradeDestorytime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="Start.lpy.pojo.Grade" >
    update grade
    <set >
      <if test="gradeName != null" >
        grade_name = #{gradeName,jdbcType=CHAR},
      </if>
      <if test="gradeState != null" >
        grade_state = #{gradeState,jdbcType=INTEGER},
      </if>
      <if test="gradeCreatetime != null" >
        grade_createtime = #{gradeCreatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="gradeDestorytime != null" >
        grade_destorytime = #{gradeDestorytime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where gid = #{gid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="Start.lpy.pojo.Grade" >
    update grade
    set grade_name = #{gradeName,jdbcType=CHAR},
      grade_state = #{gradeState,jdbcType=INTEGER},
      grade_createtime = #{gradeCreatetime,jdbcType=TIMESTAMP},
      grade_destorytime = #{gradeDestorytime,jdbcType=TIMESTAMP}
    where gid = #{gid,jdbcType=INTEGER}
  </update>
</mapper>